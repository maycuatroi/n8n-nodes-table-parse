name: Publish to npm

on:
  release:
    types: [created]
  push:
    branches: [main]
  workflow_dispatch:
    inputs:
      version:
        description: "Version to publish (patch, minor, major, or specific version)"
        required: true
        default: "patch"

jobs:
  publish:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
    steps:
      - uses: actions/checkout@v3
        with:
          # This ensures the entire git history is downloaded
          fetch-depth: 0

      - name: Use Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "16.x"
          registry-url: "https://registry.npmjs.org"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Build
        run: npm run build

      - name: Verify package
        run: |
          # Make sure everything compiles properly
          npm run lint || true
          # Check if the build produced output
          if [ ! -d "dist" ] || [ -z "$(ls -A dist)" ]; then
            echo "Build failed to produce output files"
            exit 1
          fi

      - name: Version and publish (on push to main)
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Auto bump patch version
          npm version patch --no-git-tag-version

          # Get the new version number
          NEW_VERSION=$(node -p "require('./package.json').version")

          # Update changelog if it exists
          if [ -f CHANGELOG.md ]; then
            TEMP_FILE=$(mktemp)
            
            # Extract header from existing CHANGELOG.md
            head -n 1 CHANGELOG.md > $TEMP_FILE
            echo "" >> $TEMP_FILE
            
            # Add new version header
            echo "## v${NEW_VERSION} ($(date +'%Y-%m-%d'))" >> $TEMP_FILE
            echo "" >> $TEMP_FILE
            
            # Get latest commits
            LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
            if [ -z "$LAST_TAG" ]; then
              git log --pretty=format:"- %s (%h)" -n 5 >> $TEMP_FILE
            else
              git log --pretty=format:"- %s (%h)" $LAST_TAG..HEAD >> $TEMP_FILE
            fi
            echo "" >> $TEMP_FILE
            
            # Append existing changelog content, skipping the header
            tail -n +2 CHANGELOG.md >> $TEMP_FILE
            
            # Replace CHANGELOG.md with the new content
            mv $TEMP_FILE CHANGELOG.md
          fi

          # Configure git 
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

          # Commit version bump and changelog update
          git add package.json package-lock.json CHANGELOG.md || true
          git commit -m "chore: bump version to v${NEW_VERSION} [skip ci]" || true

          # Push changes to main
          git push origin main || true

          # Create and push tag
          git tag -a "v${NEW_VERSION}" -m "Release v${NEW_VERSION}"
          git push origin "v${NEW_VERSION}"

          # Publish to npm
          npm publish

      - name: Version and publish (on release event)
        if: github.event_name == 'release'
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: |
          # Extract version from the release tag
          VERSION=${GITHUB_REF#refs/tags/}
          VERSION=${VERSION#v}

          # Update package.json version
          npm version --no-git-tag-version "$VERSION"

          # Publish to npm
          npm publish

      - name: Version and publish (manual workflow dispatch)
        if: github.event_name == 'workflow_dispatch'
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: |
          # Update version based on input
          if [[ "${{ github.event.inputs.version }}" =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            npm version --no-git-tag-version "${{ github.event.inputs.version }}"
          else
            npm version --no-git-tag-version "${{ github.event.inputs.version }}"
          fi

          # Publish to npm
          npm publish

          # Get the new version number
          NEW_VERSION=$(node -p "require('./package.json').version")

          # Create git tag
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git tag -a "v$NEW_VERSION" -m "Release v$NEW_VERSION"
          git push origin "v$NEW_VERSION"
